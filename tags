!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOST_AUTO_TEST_CASE	.\test.cpp	/^BOOST_AUTO_TEST_CASE(insert_test)$/;"	f	signature:(insert_test)
BOOST_AUTO_TEST_CASE	.\test.cpp	/^BOOST_AUTO_TEST_CASE(operator_test)$/;"	f	signature:(operator_test)
BOOST_TEST_MODULE	.\test.cpp	1;"	d	file:
BOOST_TRIE_HPP	.\trie.hpp	2;"	d
boost	.\trie.hpp	/^namespace boost { namespace tries {$/;"	n
boost::tries	.\trie.hpp	/^namespace boost { namespace tries {$/;"	n	namespace:boost
boost::tries::detail	.\trie.hpp	/^namespace detail {$/;"	n	namespace:boost::tries
boost::tries::detail::trie_node	.\trie.hpp	/^class trie_node {$/;"	c	namespace:boost::tries::detail
boost::tries::detail::trie_node::child	.\trie.hpp	/^	children_type child;$/;"	m	class:boost::tries::detail::trie_node	access:private
boost::tries::detail::trie_node::child_iter	.\trie.hpp	/^	typedef typename children_type::iterator child_iter;$/;"	t	class:boost::tries::detail::trie_node	access:private
boost::tries::detail::trie_node::children_type	.\trie.hpp	/^	typedef std::map<key_type, node_ptr> children_type;$/;"	t	class:boost::tries::detail::trie_node	access:private
boost::tries::detail::trie_node::destroy	.\trie.hpp	/^	void destroy()$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:()
boost::tries::detail::trie_node::erase	.\trie.hpp	/^	bool erase(Iter cur_iter, Iter last)$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter cur_iter, Iter last)
boost::tries::detail::trie_node::find	.\trie.hpp	/^	value_type *find(Iter first, Iter last)$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter first, Iter last)
boost::tries::detail::trie_node::find_node	.\trie.hpp	/^	node_ptr find_node(Iter cur_iter, Iter iter_end)$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter cur_iter, Iter iter_end)
boost::tries::detail::trie_node::find_prefix	.\trie.hpp	/^	node_ptr *find_prefix(Iter first, Iter last)$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter first, Iter last)
boost::tries::detail::trie_node::insert	.\trie.hpp	/^	std::pair<node_ptr, bool> insert(Iter cur_iter, Iter iter_end, const value_type &_value)$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter cur_iter, Iter iter_end, const value_type &_value)
boost::tries::detail::trie_node::insert_impl	.\trie.hpp	/^	std::pair<node_ptr, bool> insert_impl(Iter cur_iter, Iter iter_end, $/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter cur_iter, Iter iter_end, const value_type &_value, const key_type &cur_key)
boost::tries::detail::trie_node::key_ptr	.\trie.hpp	/^	typedef key_type *key_ptr;$/;"	t	class:boost::tries::detail::trie_node	access:private
boost::tries::detail::trie_node::key_type	.\trie.hpp	/^	typedef Key key_type;$/;"	t	class:boost::tries::detail::trie_node	access:private
boost::tries::detail::trie_node::node_ptr	.\trie.hpp	/^	typedef trie_node<key_type, value_type> * node_ptr;$/;"	t	class:boost::tries::detail::trie_node	access:private
boost::tries::detail::trie_node::node_type	.\trie.hpp	/^	typedef trie_node<key_type, value_type> node_type;$/;"	t	class:boost::tries::detail::trie_node	access:private
boost::tries::detail::trie_node::trie_node	.\trie.hpp	/^	trie_node() : value(NULL) {}$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:()
boost::tries::detail::trie_node::value	.\trie.hpp	/^	value_type *value; \/\/ how to initiate$/;"	m	class:boost::tries::detail::trie_node	access:public
boost::tries::detail::trie_node::value_type	.\trie.hpp	/^	typedef Value value_type;$/;"	t	class:boost::tries::detail::trie_node	access:private
boost::tries::detail::trie_node::~trie_node	.\trie.hpp	/^	~trie_node()$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:()
boost::tries::trie	.\trie.hpp	/^class trie {$/;"	c	namespace:boost::tries
boost::tries::trie::clear	.\trie.hpp	/^	bool clear()$/;"	f	class:boost::tries::trie	access:public	signature:()
boost::tries::trie::count	.\trie.hpp	/^	size_t count()$/;"	f	class:boost::tries::trie	access:public	signature:()
boost::tries::trie::erase	.\trie.hpp	/^	bool erase(key_type* key_string, int len)$/;"	f	class:boost::tries::trie	access:public	signature:(key_type* key_string, int len)
boost::tries::trie::find	.\trie.hpp	/^	value_type find(const Container &container)$/;"	f	class:boost::tries::trie	access:public	signature:(const Container &container)
boost::tries::trie::find	.\trie.hpp	/^	value_type find(key_type* key_string, int len)$/;"	f	class:boost::tries::trie	access:public	signature:(key_type* key_string, int len)
boost::tries::trie::find_prefix	.\trie.hpp	/^	node_ptr find_prefix(const Container &container)$/;"	f	class:boost::tries::trie	access:public	signature:(const Container &container)
boost::tries::trie::find_prefix	.\trie.hpp	/^	node_ptr find_prefix(key_type* key_string, int len)$/;"	f	class:boost::tries::trie	access:public	signature:(key_type* key_string, int len)
boost::tries::trie::insert	.\trie.hpp	/^	std::pair<node_ptr, bool> insert(Iter first, Iter last, const value_type &value)$/;"	f	class:boost::tries::trie	access:public	signature:(Iter first, Iter last, const value_type &value)
boost::tries::trie::insert	.\trie.hpp	/^	std::pair<node_ptr, bool> insert(const Container &container, const value_type &value)$/;"	f	class:boost::tries::trie	access:public	signature:(const Container &container, const value_type &value)
boost::tries::trie::insert	.\trie.hpp	/^	std::pair<node_ptr, bool> insert(key_ptr key_string, int len, const value_type &value)$/;"	f	class:boost::tries::trie	access:public	signature:(key_ptr key_string, int len, const value_type &value)
boost::tries::trie::key_ptr	.\trie.hpp	/^	typedef key_type * key_ptr;$/;"	t	class:boost::tries::trie	access:private
boost::tries::trie::key_type	.\trie.hpp	/^	typedef Key key_type;$/;"	t	class:boost::tries::trie	access:private
boost::tries::trie::node_ptr	.\trie.hpp	/^	typedef node_type * node_ptr;$/;"	t	class:boost::tries::trie	access:private
boost::tries::trie::node_type	.\trie.hpp	/^	typedef detail::trie_node<key_type, value_type> node_type;$/;"	t	class:boost::tries::trie	access:private
boost::tries::trie::operator []	.\trie.hpp	/^	value_type & operator[] (const Container &container)$/;"	f	class:boost::tries::trie	access:public	signature:(const Container &container)
boost::tries::trie::root	.\trie.hpp	/^	node_ptr root;$/;"	m	class:boost::tries::trie	access:private
boost::tries::trie::size	.\trie.hpp	/^	size_t size()$/;"	f	class:boost::tries::trie	access:public	signature:()
boost::tries::trie::swap	.\trie.hpp	/^	void swap(trie_type &other)$/;"	f	class:boost::tries::trie	access:public	signature:(trie_type &other)
boost::tries::trie::trie	.\trie.hpp	/^	trie() {$/;"	f	class:boost::tries::trie	access:public	signature:()
boost::tries::trie::trie_type	.\trie.hpp	/^	typedef trie<key_type, value_type> trie_type;$/;"	t	class:boost::tries::trie	access:private
boost::tries::trie::value_type	.\trie.hpp	/^	typedef Value value_type;$/;"	t	class:boost::tries::trie	access:private
boost::tries::trie::~trie	.\trie.hpp	/^	~trie()$/;"	f	class:boost::tries::trie	access:public	signature:()
child	.\trie.hpp	/^	children_type child;$/;"	m	class:boost::tries::detail::trie_node	access:private
child_iter	.\trie.hpp	/^	typedef typename children_type::iterator child_iter;$/;"	t	class:boost::tries::detail::trie_node	access:private
children_type	.\trie.hpp	/^	typedef std::map<key_type, node_ptr> children_type;$/;"	t	class:boost::tries::detail::trie_node	access:private
clear	.\trie.hpp	/^	bool clear()$/;"	f	class:boost::tries::trie	access:public	signature:()
count	.\trie.hpp	/^	size_t count()$/;"	f	class:boost::tries::trie	access:public	signature:()
destroy	.\trie.hpp	/^	void destroy()$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:()
detail	.\trie.hpp	/^namespace detail {$/;"	n	namespace:boost::tries
erase	.\trie.hpp	/^	bool erase(Iter cur_iter, Iter last)$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter cur_iter, Iter last)
erase	.\trie.hpp	/^	bool erase(key_type* key_string, int len)$/;"	f	class:boost::tries::trie	access:public	signature:(key_type* key_string, int len)
find	.\trie.hpp	/^	value_type *find(Iter first, Iter last)$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter first, Iter last)
find	.\trie.hpp	/^	value_type find(const Container &container)$/;"	f	class:boost::tries::trie	access:public	signature:(const Container &container)
find	.\trie.hpp	/^	value_type find(key_type* key_string, int len)$/;"	f	class:boost::tries::trie	access:public	signature:(key_type* key_string, int len)
find_node	.\trie.hpp	/^	node_ptr find_node(Iter cur_iter, Iter iter_end)$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter cur_iter, Iter iter_end)
find_prefix	.\trie.hpp	/^	node_ptr *find_prefix(Iter first, Iter last)$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter first, Iter last)
find_prefix	.\trie.hpp	/^	node_ptr find_prefix(const Container &container)$/;"	f	class:boost::tries::trie	access:public	signature:(const Container &container)
find_prefix	.\trie.hpp	/^	node_ptr find_prefix(key_type* key_string, int len)$/;"	f	class:boost::tries::trie	access:public	signature:(key_type* key_string, int len)
insert	.\trie.hpp	/^	std::pair<node_ptr, bool> insert(Iter cur_iter, Iter iter_end, const value_type &_value)$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter cur_iter, Iter iter_end, const value_type &_value)
insert	.\trie.hpp	/^	std::pair<node_ptr, bool> insert(Iter first, Iter last, const value_type &value)$/;"	f	class:boost::tries::trie	access:public	signature:(Iter first, Iter last, const value_type &value)
insert	.\trie.hpp	/^	std::pair<node_ptr, bool> insert(const Container &container, const value_type &value)$/;"	f	class:boost::tries::trie	access:public	signature:(const Container &container, const value_type &value)
insert	.\trie.hpp	/^	std::pair<node_ptr, bool> insert(key_ptr key_string, int len, const value_type &value)$/;"	f	class:boost::tries::trie	access:public	signature:(key_ptr key_string, int len, const value_type &value)
insert_impl	.\trie.hpp	/^	std::pair<node_ptr, bool> insert_impl(Iter cur_iter, Iter iter_end, $/;"	f	class:boost::tries::detail::trie_node	access:public	signature:(Iter cur_iter, Iter iter_end, const value_type &_value, const key_type &cur_key)
key_ptr	.\trie.hpp	/^	typedef key_type * key_ptr;$/;"	t	class:boost::tries::trie	access:private
key_ptr	.\trie.hpp	/^	typedef key_type *key_ptr;$/;"	t	class:boost::tries::detail::trie_node	access:private
key_type	.\trie.hpp	/^	typedef Key key_type;$/;"	t	class:boost::tries::detail::trie_node	access:private
key_type	.\trie.hpp	/^	typedef Key key_type;$/;"	t	class:boost::tries::trie	access:private
node_ptr	.\trie.hpp	/^	typedef node_type * node_ptr;$/;"	t	class:boost::tries::trie	access:private
node_ptr	.\trie.hpp	/^	typedef trie_node<key_type, value_type> * node_ptr;$/;"	t	class:boost::tries::detail::trie_node	access:private
node_type	.\trie.hpp	/^	typedef detail::trie_node<key_type, value_type> node_type;$/;"	t	class:boost::tries::trie	access:private
node_type	.\trie.hpp	/^	typedef trie_node<key_type, value_type> node_type;$/;"	t	class:boost::tries::detail::trie_node	access:private
operator []	.\trie.hpp	/^	value_type & operator[] (const Container &container)$/;"	f	class:boost::tries::trie	access:public	signature:(const Container &container)
root	.\trie.hpp	/^	node_ptr root;$/;"	m	class:boost::tries::trie	access:private
size	.\trie.hpp	/^	size_t size()$/;"	f	class:boost::tries::trie	access:public	signature:()
swap	.\trie.hpp	/^	void swap(trie_type &other)$/;"	f	class:boost::tries::trie	access:public	signature:(trie_type &other)
trie	.\trie.hpp	/^	trie() {$/;"	f	class:boost::tries::trie	access:public	signature:()
trie	.\trie.hpp	/^class trie {$/;"	c	namespace:boost::tries
trie_node	.\trie.hpp	/^	trie_node() : value(NULL) {}$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:()
trie_node	.\trie.hpp	/^class trie_node {$/;"	c	namespace:boost::tries::detail
trie_type	.\trie.hpp	/^	typedef trie<key_type, value_type> trie_type;$/;"	t	class:boost::tries::trie	access:private
tries	.\trie.hpp	/^namespace boost { namespace tries {$/;"	n	namespace:boost
value	.\trie.hpp	/^	value_type *value; \/\/ how to initiate$/;"	m	class:boost::tries::detail::trie_node	access:public
value_type	.\trie.hpp	/^	typedef Value value_type;$/;"	t	class:boost::tries::detail::trie_node	access:private
value_type	.\trie.hpp	/^	typedef Value value_type;$/;"	t	class:boost::tries::trie	access:private
~trie	.\trie.hpp	/^	~trie()$/;"	f	class:boost::tries::trie	access:public	signature:()
~trie_node	.\trie.hpp	/^	~trie_node()$/;"	f	class:boost::tries::detail::trie_node	access:public	signature:()
